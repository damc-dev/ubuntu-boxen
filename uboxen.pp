
# Look at here for ideas:
# https://sites.google.com/site/bmaupinwiki/home/operating-systems/gnu-linux/ubuntuelementary/ubuntu-gsettings-dconf
class profile::gnome::backup {

    package { [ 'deja-dup', 'deja-dup-backend-s3' ]: ensure => latest }

    gnome::gsettings { "wmpref":
        user => "user",
        schema => "org.gnome.desktop.wm.preferences",
            key => "theme",
            value => "Ambiance",
        }

}
# Puppet dev environment
class profile::puppet::developer {

    ensure_packages(['libxslt-dev', 'libxml2-dev', 'ruby-dev', 'zlib1g-dev' ])

    package { [ 'puppet-syntax', 'puppet-lint' ]:
        provider => 'gem',
        ensure   => 'present',
    }

  #if profile::editors
  #vim::plugin { 'puppet':
  #  source => 'https://github.com/rodjek/vim-puppet.git',
  #  require => [ Vim::Plugin['tabular'], Vim::Plugin['snippets'] ],
  #}

}

define motd::usernote($content = '') {
  file { "/etc/update-motd.d/60-${name}":
    content  => $content,
  }
}

class bash(
    $aliases = {},
    $rc = {},
)
{
    validate_hash($aliases)
    validate_hash($rc)

    package { [ 'bash', 'bash-completion', 'command-not-found' ] :
        ensure => latest,
    }

    # Host autocomplete runs better if knownhosts has not hostnames hashed
    wget::fetch { 'ssh-bash-autocomplete':
        source => 'http://cdn2.static.surniaulula.com/wp-content/uploads/crayon/complete-hosts.sh',
        destination => '/etc/profile.d/complete-hosts.sh',
    }


    file { '/etc/profile.d/load-puppet-profile.sh':
        content => "# file generated by puppet\n[ -f ~/.bashrc.puppet ] && source ~/.bashrc.puppet\n",
    }

    if $aliases {
        create_resources('bash::alias', $aliases)
    }

    if $rc {
        create_resources('bash::rc', $rc)
    }


}


# if user specified add config to ~/.bashrc.puppet
# else add config to system-wide bashrc.puppet.sh
define bash::rc(
  $content = '',
  $user = undef,
) {
  validate_string($content)

  $real_content = $content ? {
    ''      => $name,
    default => "# $name\n$content",
  }

  if $user {
    validate_string($user)
    $real_target = "/home/$user/.bashrc.puppet"
    validate_absolute_path($real_target)
  } else {
    $real_target  = '/etc/profile.d/bashrc.puppet.sh'
  }

  if ! defined(Concat[$real_target]) {
    concat { $real_target : }
    concat::fragment { 'systemwide-bashrc-header':
      content => "# file generated by Puppet\n\n",
      target  => $real_target,
      order   => '00',
    }
  }

  concat::fragment { $name:
    target  => $real_target,
    content => "$real_content\n\n",
  }
}

define bash::alias(
    $cmd
)
{
    bash::rc{ $name:
        content => "alias ${name}=\"${cmd}\"",
    }

}
node generic_desktop {

 # Security
  class { 'sudo':
    require	=> Package['ruby-hiera'],
  }
  sudo::conf { 'wheel-group':
    priority => 10,
    content  => "%wheel ALL=(ALL) NOPASSWD: ALL",
  }
  group { 'wheel':
    ensure => 'present',
  }
  wget::fetch { 'gedit-solarized-theme-dark':
    source      => 'https://raw.github.com/altercation/solarized/master/gedit/solarized-dark.xml',
    destination => '/usr/share/gtksourceview-3.0/styles/solarized-dark.xml',
    require     => Package['gedit'],
  }
  wget::fetch { 'gedit-solarized-theme-light':
    source      => 'https://raw.github.com/altercation/solarized/master/gedit/solarized-light.xml',
    destination => '/usr/share/gtksourceview-3.0/styles/solarized-light.xml',
    require     => Package['gedit'],
  }

}
node 'ZEN' {

  class { 'vim':
    user     => $unix_user,
    home_dir => $unix_home,
  }

  # Vim colorscheme - http://ethanschoonover.com/solarized
  vim::plugin { 'colors-solarized':
    source => 'https://github.com/altercation/vim-colors-solarized.git',
  }
  vim::plugin { 'colors-monokai':
    source => 'https://github.com/sickill/vim-monokai.git',
  }
  vim::plugin { 'colors-gruvbox':
    source => 'https://github.com/morhetz/gruvbox.git',
  }
  vim::rc { 'sane-text-files':
    content => "set fileformat=unix\nset encoding=utf-8",
  }
  vim::rc { 'set number': }
  vim::rc { 'set tabstop=2': }
  vim::rc { 'set shiftwidth=2': }
  vim::rc { 'set softtabstop=2': }
  vim::rc { 'set expandtab': }

  vim::rc { 'set pastetoggle=<F6>': }

  vim::rc { 'intuitive-split-positions':
    content => "set splitbelow\nset splitright",
  }

  vim::rc { 'silent! colorscheme solarized': }
  #vim::rc { 'silent! colorscheme monokai': }
  vim::rc { 'background-x-gui':
    content => "if has('gui_running')\n\tset background=light\nelse\n\tset background=dark\nendif",
  }
  # Vim plugin: syntastic
  vim::plugin { 'syntastic':
    source => 'https://github.com/scrooloose/syntastic.git',
  }
  vim::plugin { 'tabular':
    source => 'https://github.com/godlygeek/tabular.git',
  }
  vim::plugin { 'snippets':
    source => 'https://github.com/honza/vim-snippets.git',
  }
  vim::plugin { 'enhanced-status-line':
    source => 'https://github.com/millermedeiros/vim-statline.git',
  }

  vim::plugin { 'nerdtree-and-tabs-together':
    source => 'https://github.com/jistr/vim-nerdtree-tabs.git',
  }
  vim::rc { 'nerdtree-start-on-console':
    content => 'let g:nerdtree_tabs_open_on_console_startup=1',
  }

  vim::plugin { 'tasklist':
    source => 'https://github.com/superjudge/tasklist-pathogen.git',
  }

  #vim::plugin { 'rainbow-parenthesis':
  #  source => 'https://github.com/oblitum/rainbow.git',
  #}
  vim::rc { 'activate rainbow parenthesis globally':
    content => 'let g:rainbow_active = 1',
  }
}
# General DEFAULTS
Exec { path => '/usr/bin:/usr/sbin/:/bin:/sbin' }

Wget::Fetch {
    cache_dir => '/var/cache/puppet-wget'
}

node default {
    hiera_include('classes', [ 'stdlib' ])
}
